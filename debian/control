Source: anbox
Section: contrib/utils
Priority: optional
Maintainer: Shengjing Zhu <i@zhsj.me>
Build-Depends:
 cmake,
 debhelper (>= 11),
 libboost-filesystem-dev,
 libboost-iostreams-dev,
 libboost-log-dev,
 libboost-program-options-dev,
 libboost-system-dev,
 libboost-test-dev,
 libcap-dev,
 libegl1-mesa-dev,
 libgles2-mesa-dev,
 libgmock-dev,
 libproperties-cpp-dev,
 libprotobuf-dev,
 libsdl2-dev,
 libsdl2-image-dev,
 libsystemd-dev,
 lxc-dev (<< 1:3.0.0),
 protobuf-compiler,
 python (<< 2.8),
Standards-Version: 4.1.4
Homepage: https://anbox.io
Vcs-Git: https://salsa.debian.org/zhsj-guest/anbox.git
Vcs-Browser: https://salsa.debian.org/zhsj-guest/anbox

Package: anbox
Architecture: amd64 armel armhf i386
Depends:
 anbox-modules-dkms,
 iptables,
 lxc,
 ${misc:Depends},
 ${shlibs:Depends},
Recommends:
 dbus-user-session,
Description: Android in a box
 Anbox is a container-based approach to boot a full Android system on a regular
 GNU/Linux system.
 .
 In other words: Anbox will let you run Android on your Linux system without
 the slowness of virtualization.
 .
 Anbox uses Linux namespaces (user, pid, uts, net, mount, ipc) to run a full
 Android system in a container and provide Android applications on any
 GNU/Linux-based platform.
 .
 The Android inside the container has no direct access to any hardware. All
 hardware access is going through the anbox daemon on the host. We're reusing
 what Android implemented within the QEMU-based emulator for OpenGL ES
 accelerated rendering. The Android system inside the container uses different
 pipes to communicate with the host system and sends all hardware access
 commands through these.
 .
 This package needs an Android image where you can find at
 <https://build.anbox.io/>.
